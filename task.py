# -*- coding: utf-8 -*-
"""task.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1yZ8fudS9KwCznTBWsqi8DXA5Wt1Lelnm
"""

import cv2
import numpy as np

# Load the shoe dataset (images of shoes)
# You can replace this with your own dataset
shoe_images = [cv2.imread('shoe.png'), cv2.imread('shoe2.png')]   ##can use as many

# Initialize the camera (use the default camera)
cap = cv2.VideoCapture(1)

# Load a foot detection model or implement one using OpenCV
# You can use Haar Cascades or other models for simplicity
foot_cascade = cv2.CascadeClassifier('shoeDetector.xml')

# Create an OpenCV window for user interaction
cv2.namedWindow('Virtual Shoe Try-On', cv2.WINDOW_NORMAL)
cv2.resizeWindow('Virtual Shoe Try-On', 800, 600)

# Initialize variables for shoe selection and rotation
selected_shoe = None
rotation_angle = 0

while True:
    # Capture a frame from the camera
    ret, frame = cap.read()

    # Detect feet in the frame
    feet = foot_cascade.detectMultiScale(frame, scaleFactor=1.1, minNeighbors=5, minSize=(30, 30))

    for (x, y, w, h) in feet:
        # If feet are detected, superimpose virtual shoes
        if selected_shoe is not None:
            # Resize the shoe image to fit the feet
            shoe_height, shoe_width, _ = selected_shoe.shape
            scale_factor = w / shoe_width
            resized_shoe = cv2.resize(selected_shoe, (int(shoe_width * scale_factor), int(shoe_height * scale_factor)))

            # Rotate the shoe if needed
            M = cv2.getRotationMatrix2D((resized_shoe.shape[1] / 2, resized_shoe.shape[0] / 2), rotation_angle, 1)
            rotated_shoe = cv2.warpAffine(resized_shoe, M, (resized_shoe.shape[1], resized_shoe.shape[0]))

            # Overlay the shoe on the frame
            for c in range(0, 3):
                frame[y:y + rotated_shoe.shape[0], x:x + rotated_shoe.shape[1], c] = \
                    frame[y:y + rotated_shoe.shape[0], x:x + rotated_shoe.shape[1], c] * (1 - rotated_shoe[:, :, 3] / 255.0) + \
                    rotated_shoe[:, :, c] * (rotated_shoe[:, :, 3] / 255.0)

    # Display the frame
    cv2.imshow('Virtual Shoe Try-On', frame)

    # Handle user interactions
    key = cv2.waitKey(1)
    if key == 27:  # Press 'Esc' to exit
        break
    elif key == ord('s'):  # Press 's' to select a shoe
        selected_shoe = np.random.choice(shoe_images)  # Randomly select a shoe from the dataset
    elif key == ord('r'):  # Press 'r' to rotate the shoe
        rotation_angle += 15
    elif key == ord('q'):  # Press 'q' to rotate the shoe in the opposite direction
        rotation_angle -= 15

# Release the camera and close all OpenCV windows
cap.release()
cv2.destroyAllWindows()